import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Configuration des graphiques
plt.style.use('default')
sns.set_palette("husl")

print("üìä COMPARATEUR DE P√âRIODES - MOD√àLE OPTIMIS√â AVEC LAGS")
print("=" * 60)

# === 1. CHARGEMENT DU MOD√àLE OPTIMIS√â ===
print("\nü§ñ 1. Chargement du mod√®le optimis√©...")

try:
    with open('modele_optimise_avec_lags.pkl', 'rb') as f:
        model_data = pickle.load(f)
    
    model = model_data['model']
    scaler = model_data['scaler']
    features = model_data['features']
    patterns_feries = model_data['patterns_feries']
    performance = model_data['performance']
    
    print(f"‚úÖ Mod√®le charg√© avec succ√®s !")
    print(f"   ‚Ä¢ Performance: MAE {performance['test_mae']:.0f} kWh (R¬≤ {performance['test_r2']:.3f})")
    print(f"   ‚Ä¢ Features: {len(features)} variables")
    print(f"   ‚Ä¢ Version: {model_data.get('version', 'v1.0')}")
    
except FileNotFoundError:
    print("‚ùå Erreur: Mod√®le non trouv√©. Veuillez d'abord ex√©cuter modele_optimise_avec_lags.py")
    exit(1)

# === 2. FONCTIONS UTILITAIRES ===
def detecter_jour_ferie(date):
    """D√©tecte si une date est un jour f√©ri√©"""
    return 1 if (date.month, date.day) in patterns_feries else 0

def create_features_prediction(df):
    """Cr√©√© des features pour la pr√©diction (identique au mod√®le d'entra√Ænement)"""
    df = df.copy()
    
    # === FEATURES M√âT√âO COMPL√àTES ===
    df['temp_range'] = df['TempMax'] - df['TempMin']
    df['temp_ma_7'] = df['TempAvg'].rolling(window=7, min_periods=1).mean()
    df['temp_ma_30'] = df['TempAvg'].rolling(window=30, min_periods=1).mean()
    df['temp_squared'] = df['TempAvg'] ** 2
    
    df['precip_ma_7'] = df['Precip'].rolling(window=7, min_periods=1).mean()
    df['has_rain'] = (df['Precip'] > 0).astype(int)
    
    df['wind_ma_7'] = df['WindSpeed'].rolling(window=7, min_periods=1).mean()
    df['pressure_ma_7'] = df['Pressure'].rolling(window=30, min_periods=1).mean()
    
    # === SEUILS TEMP√âRATURE ===
    temp_25, temp_30 = 25.0, 30.0
    df['cooling_needs_light'] = np.maximum(0, df['TempAvg'] - temp_25)
    df['cooling_needs_heavy'] = np.maximum(0, df['TempAvg'] - temp_30)
    df['heating_needs'] = np.maximum(0, temp_25 - df['TempAvg'])
    
    df['temp_above_25'] = (df['TempAvg'] > 25).astype(int)
    df['temp_above_28'] = (df['TempAvg'] > 28).astype(int)
    df['temp_above_30'] = (df['TempAvg'] > 30).astype(int)
    
    # === SAISONS ===
    df['is_summer'] = ((df['Day'].dt.month >= 6) & (df['Day'].dt.month <= 8)).astype(int)
    df['is_winter'] = ((df['Day'].dt.month == 12) | (df['Day'].dt.month <= 2)).astype(int)
    df['is_mid_summer'] = (df['Day'].dt.month == 7).astype(int)
    
    # === FEATURES CYCLIQUES ===
    df['month_sin'] = np.sin(2 * np.pi * df['Day'].dt.month / 12)
    df['month_cos'] = np.cos(2 * np.pi * df['Day'].dt.month / 12)
    df['day_of_year_sin'] = np.sin(2 * np.pi * df['Day'].dt.dayofyear / 365)
    df['day_of_year_cos'] = np.cos(2 * np.pi * df['Day'].dt.dayofyear / 365)
    
    # === INTERACTIONS ===
    df['temp_x_summer'] = df['TempAvg'] * df['is_summer']
    df['temp_x_mid_summer'] = df['TempAvg'] * df['is_mid_summer']
    df['temp_squared_x_summer'] = df['temp_squared'] * df['is_summer']
    df['temp_x_wind'] = df['TempAvg'] * df['WindSpeed']
    df['pressure_x_temp'] = df['Pressure'] * df['TempAvg']
    
    # === TEMPOREL ===
    reference_date = pd.to_datetime('2022-01-01')
    df['time_trend'] = (df['Day'] - reference_date).dt.days / 365.25
    df['is_weekend'] = (df['Day'].dt.dayofweek >= 5).astype(int)
    df['is_holiday'] = df['Day'].apply(detecter_jour_ferie)
    
    # === LAGS CRITIQUES ===
    df['consumption_lag_1'] = df['DailyAverage'].shift(1)
    df['consumption_lag_7'] = df['DailyAverage'].shift(7)
    
    # === FEATURES FIN D'ANN√âE ===
    df['is_december'] = (df['Day'].dt.month == 12).astype(int)
    df['days_to_new_year'] = 32 - df['Day'].dt.day
    df['is_end_of_year'] = ((df['Day'].dt.month == 12) & (df['Day'].dt.day >= 15)).astype(int)
    
    return df

def parse_date(date_str):
    """Parse une date en format flexible"""
    try:
        # Essayer diff√©rents formats
        for fmt in ['%Y-%m-%d', '%d/%m/%Y', '%d-%m-%Y']:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        raise ValueError("Format de date non reconnu")
    except:
        raise ValueError("Format de date invalide")

def get_period_data(start_date, end_date, df_source):
    """Extrait les donn√©es pour une p√©riode donn√©e"""
    mask = (df_source['Day'] >= start_date) & (df_source['Day'] <= end_date)
    period_data = df_source[mask].copy()
    
    if len(period_data) == 0:
        raise ValueError(f"Aucune donn√©e trouv√©e pour la p√©riode {start_date.date()} - {end_date.date()}")
    
    return period_data

# === 3. CHARGEMENT DES DONN√âES HISTORIQUES ===
print("\nüìä 2. Chargement des donn√©es historiques...")

df = pd.read_csv("data_with_context_fixed.csv")
df['Day'] = pd.to_datetime(df['Day'])
df = df.sort_values('Day').reset_index(drop=True)

print(f"‚úÖ Donn√©es charg√©es: {len(df)} jours")
print(f"   P√©riode disponible: {df['Day'].min().date()} ‚Üí {df['Day'].max().date()}")

# === 4. INTERFACE UTILISATEUR ===
def get_user_input():
    """Interface pour saisir les p√©riodes"""
    print("\nüìÖ 3. S√©lection des p√©riodes √† comparer")
    print("   Format accept√©: YYYY-MM-DD, DD/MM/YYYY ou DD-MM-YYYY")
    print("   Ex: 2024-07-01, 01/07/2024, 01-07-2024")
    
    while True:
        try:
            print(f"\nüéØ P√âRIODE 1 √Ä ESTIMER:")
            start1_str = input("   Date de d√©but: ")
            end1_str = input("   Date de fin: ")
            start1 = parse_date(start1_str)
            end1 = parse_date(end1_str)
            
            if start1 >= end1:
                print("‚ùå La date de d√©but doit √™tre ant√©rieure √† la date de fin")
                continue
            
            print(f"\nüéØ P√âRIODE 2 √Ä COMPARER:")
            start2_str = input("   Date de d√©but: ")
            end2_str = input("   Date de fin: ")
            start2 = parse_date(start2_str)
            end2 = parse_date(end2_str)
            
            if start2 >= end2:
                print("‚ùå La date de d√©but doit √™tre ant√©rieure √† la date de fin")
                continue
            
            return start1, end1, start2, end2
            
        except ValueError as e:
            print(f"‚ùå Erreur: {e}")
            print("   Veuillez r√©essayer avec un format valide")

# === 5. SAISIE DES P√âRIODES ===
start1, end1, start2, end2 = get_user_input()

print(f"\n‚úÖ P√©riodes s√©lectionn√©es:")
print(f"   P√©riode 1: {start1.date()} ‚Üí {end1.date()} ({(end1-start1).days + 1} jours)")
print(f"   P√©riode 2: {start2.date()} ‚Üí {end2.date()} ({(end2-start2).days + 1} jours)")

# === 6. EXTRACTION ET PR√âPARATION DES DONN√âES ===
print("\nüîß 4. Pr√©paration des donn√©es pour pr√©diction...")

try:
    # Extraire les donn√©es pour chaque p√©riode
    period1_data = get_period_data(start1, end1, df)
    period2_data = get_period_data(start2, end2, df)
    
    print(f"‚úÖ P√©riode 1: {len(period1_data)} jours de donn√©es")
    print(f"‚úÖ P√©riode 2: {len(period2_data)} jours de donn√©es")
    
    # Cr√©er les features
    period1_features = create_features_prediction(period1_data)
    period2_features = create_features_prediction(period2_data)
    
    # Supprimer les NaN des lags (garder seulement les donn√©es avec lags valides)
    period1_clean = period1_features.dropna()
    period2_clean = period2_features.dropna()
    
    print(f"üìä Apr√®s nettoyage des lags:")
    print(f"   P√©riode 1: {len(period1_clean)} jours (perdus: {len(period1_features) - len(period1_clean)})")
    print(f"   P√©riode 2: {len(period2_clean)} jours (perdus: {len(period2_features) - len(period2_clean)})")
    
except ValueError as e:
    print(f"‚ùå Erreur: {e}")
    exit(1)

# === 7. PR√âDICTIONS ===
print("\nü§ñ 5. G√©n√©ration des pr√©dictions...")

# Pr√©parer les features pour le mod√®le
X1 = period1_clean[features]
X2 = period2_clean[features]

# Normaliser avec le scaler du mod√®le
X1_scaled = scaler.transform(X1)
X2_scaled = scaler.transform(X2)

# Pr√©dictions
pred1 = model.predict(X1_scaled)
pred2 = model.predict(X2_scaled)

# Ajouter les pr√©dictions aux DataFrames
period1_clean = period1_clean.copy()
period2_clean = period2_clean.copy()
period1_clean['predictions'] = pred1
period2_clean['predictions'] = pred2

print(f"‚úÖ Pr√©dictions g√©n√©r√©es!")

# === 8. CALCUL DES STATISTIQUES COMPARATIVES ===
print("\nüìä 6. Calcul des statistiques comparatives...")

stats1 = {
    'periode': f"{start1.date()} ‚Üí {end1.date()}",
    'nb_jours': len(period1_clean),
    'consommation_totale': period1_clean['predictions'].sum(),
    'consommation_moyenne': period1_clean['predictions'].mean(),
    'consommation_max': period1_clean['predictions'].max(),
    'consommation_min': period1_clean['predictions'].min(),
    'temp_moyenne': period1_clean['TempAvg'].mean(),
    'nb_weekends': period1_clean['is_weekend'].sum(),
    'nb_feries': period1_clean['is_holiday'].sum()
}

stats2 = {
    'periode': f"{start2.date()} ‚Üí {end2.date()}",
    'nb_jours': len(period2_clean),
    'consommation_totale': period2_clean['predictions'].sum(),
    'consommation_moyenne': period2_clean['predictions'].mean(),
    'consommation_max': period2_clean['predictions'].max(),
    'consommation_min': period2_clean['predictions'].min(),
    'temp_moyenne': period2_clean['TempAvg'].mean(),
    'nb_weekends': period2_clean['is_weekend'].sum(),
    'nb_feries': period2_clean['is_holiday'].sum()
}

# Calculs comparatifs
diff_totale = stats1['consommation_totale'] - stats2['consommation_totale']
diff_moyenne = stats1['consommation_moyenne'] - stats2['consommation_moyenne']
diff_pct = (diff_totale / stats2['consommation_totale']) * 100

print(f"üìà STATISTIQUES COMPARATIVES:")
print("=" * 70)
print(f"{'M√©trique':<25} | {'P√©riode 1':<15} | {'P√©riode 2':<15} | {'Diff√©rence':<12}")
print("-" * 70)
print(f"{'Jours':<25} | {stats1['nb_jours']:>13} | {stats2['nb_jours']:>13} | {stats1['nb_jours']-stats2['nb_jours']:>10}")
print(f"{'Total (kWh)':<25} | {stats1['consommation_totale']:>11.0f} | {stats2['consommation_totale']:>11.0f} | {diff_totale:>10.0f}")
print(f"{'Moyenne/jour (kWh)':<25} | {stats1['consommation_moyenne']:>11.0f} | {stats2['consommation_moyenne']:>11.0f} | {diff_moyenne:>10.0f}")
print(f"{'Max (kWh)':<25} | {stats1['consommation_max']:>11.0f} | {stats2['consommation_max']:>11.0f} | {stats1['consommation_max']-stats2['consommation_max']:>10.0f}")
print(f"{'Min (kWh)':<25} | {stats1['consommation_min']:>11.0f} | {stats2['consommation_min']:>11.0f} | {stats1['consommation_min']-stats2['consommation_min']:>10.0f}")
print(f"{'Temp moy (¬∞C)':<25} | {stats1['temp_moyenne']:>11.1f} | {stats2['temp_moyenne']:>11.1f} | {stats1['temp_moyenne']-stats2['temp_moyenne']:>10.1f}")
print(f"{'Weekends':<25} | {stats1['nb_weekends']:>13} | {stats2['nb_weekends']:>13} | {stats1['nb_weekends']-stats2['nb_weekends']:>10}")
print(f"{'Jours f√©ri√©s':<25} | {stats1['nb_feries']:>13} | {stats2['nb_feries']:>13} | {stats1['nb_feries']-stats2['nb_feries']:>10}")

print(f"\nüéØ R√âSUM√â:")
if diff_pct > 0:
    print(f"   üìà P√©riode 1 consomme {diff_pct:.1f}% DE PLUS que P√©riode 2")
    print(f"   üìä Soit {diff_totale:.0f} kWh suppl√©mentaires ({diff_moyenne:.0f} kWh/jour)")
else:
    print(f"   üìâ P√©riode 1 consomme {abs(diff_pct):.1f}% DE MOINS que P√©riode 2")
    print(f"   üìä Soit {abs(diff_totale):.0f} kWh √©conomis√©s ({abs(diff_moyenne):.0f} kWh/jour)")

# === 9. VISUALISATIONS COMPARATIVES ===
print("\nüìä 7. G√©n√©ration des graphiques comparatifs...")

fig, axes = plt.subplots(2, 2, figsize=(16, 12))
fig.suptitle(f'üìä COMPARAISON DE P√âRIODES - MOD√àLE OPTIMIS√â\n'
             f'P√©riode 1: {start1.date()} ‚Üí {end1.date()} | '
             f'P√©riode 2: {start2.date()} ‚Üí {end2.date()}', 
             fontsize=14, fontweight='bold')

# Plot 1: √âvolution temporelle des consommations
axes[0,0].plot(period1_clean['Day'], period1_clean['predictions'], 
               color='blue', linewidth=2, label=f'P√©riode 1 ({start1.date()})', alpha=0.8)
axes[0,0].plot(period2_clean['Day'], period2_clean['predictions'], 
               color='red', linewidth=2, label=f'P√©riode 2 ({start2.date()})', alpha=0.8)
axes[0,0].set_xlabel('Date')
axes[0,0].set_ylabel('Consommation Pr√©dite (kWh)')
axes[0,0].set_title('√âvolution Temporelle des Consommations')
axes[0,0].legend()
axes[0,0].grid(True, alpha=0.3)
axes[0,0].tick_params(axis='x', rotation=45)

# Plot 2: Distributions des consommations
axes[0,1].hist(period1_clean['predictions'], bins=20, alpha=0.7, color='blue', 
               label=f'P√©riode 1\n(Œº={stats1["consommation_moyenne"]:.0f} kWh)', density=True)
axes[0,1].hist(period2_clean['predictions'], bins=20, alpha=0.7, color='red', 
               label=f'P√©riode 2\n(Œº={stats2["consommation_moyenne"]:.0f} kWh)', density=True)
axes[0,1].set_xlabel('Consommation Pr√©dite (kWh)')
axes[0,1].set_ylabel('Densit√©')
axes[0,1].set_title('Distribution des Consommations')
axes[0,1].legend()
axes[0,1].grid(True, alpha=0.3)

# Plot 3: Comparaison par type de jour
def categorize_day(row):
    if row['is_holiday']:
        return 'Jour f√©ri√©'
    elif row['is_weekend']:
        return 'Weekend'
    else:
        return 'Jour ouvrable'

period1_clean['day_type'] = period1_clean.apply(categorize_day, axis=1)
period2_clean['day_type'] = period2_clean.apply(categorize_day, axis=1)

day_types = ['Jour ouvrable', 'Weekend', 'Jour f√©ri√©']
means1 = [period1_clean[period1_clean['day_type'] == dt]['predictions'].mean() 
          for dt in day_types]
means2 = [period2_clean[period2_clean['day_type'] == dt]['predictions'].mean() 
          for dt in day_types]

x = np.arange(len(day_types))
width = 0.35

axes[1,0].bar(x - width/2, means1, width, label='P√©riode 1', color='blue', alpha=0.7)
axes[1,0].bar(x + width/2, means2, width, label='P√©riode 2', color='red', alpha=0.7)
axes[1,0].set_xlabel('Type de Jour')
axes[1,0].set_ylabel('Consommation Moyenne (kWh)')
axes[1,0].set_title('Consommation par Type de Jour')
axes[1,0].set_xticks(x)
axes[1,0].set_xticklabels(day_types)
axes[1,0].legend()
axes[1,0].grid(True, alpha=0.3)

# Plot 4: Relation Temp√©rature vs Consommation
axes[1,1].scatter(period1_clean['TempAvg'], period1_clean['predictions'], 
                  alpha=0.6, color='blue', s=30, label='P√©riode 1')
axes[1,1].scatter(period2_clean['TempAvg'], period2_clean['predictions'], 
                  alpha=0.6, color='red', s=30, label='P√©riode 2')

# Ajouter des lignes de tendance
z1 = np.polyfit(period1_clean['TempAvg'], period1_clean['predictions'], 1)
z2 = np.polyfit(period2_clean['TempAvg'], period2_clean['predictions'], 1)
p1 = np.poly1d(z1)
p2 = np.poly1d(z2)

temp_range1 = np.linspace(period1_clean['TempAvg'].min(), period1_clean['TempAvg'].max(), 100)
temp_range2 = np.linspace(period2_clean['TempAvg'].min(), period2_clean['TempAvg'].max(), 100)

axes[1,1].plot(temp_range1, p1(temp_range1), color='blue', linestyle='--', alpha=0.8)
axes[1,1].plot(temp_range2, p2(temp_range2), color='red', linestyle='--', alpha=0.8)

axes[1,1].set_xlabel('Temp√©rature Moyenne (¬∞C)')
axes[1,1].set_ylabel('Consommation Pr√©dite (kWh)')
axes[1,1].set_title('Consommation vs Temp√©rature')
axes[1,1].legend()
axes[1,1].grid(True, alpha=0.3)

plt.tight_layout()

# Sauvegarder le graphique
filename = f"comparaison_{start1.strftime('%Y%m%d')}_{end1.strftime('%Y%m%d')}_vs_{start2.strftime('%Y%m%d')}_{end2.strftime('%Y%m%d')}.png"
plt.savefig(filename, dpi=300, bbox_inches='tight')
plt.show()

print(f"‚úÖ Graphique sauvegard√©: {filename}")

# === 10. EXPORT DES DONN√âES (OPTIONNEL) ===
save_data = input("\nüíæ Voulez-vous sauvegarder les donn√©es d√©taill√©es ? (o/n): ")

if save_data.lower() in ['o', 'oui', 'y', 'yes']:
    # Pr√©parer les donn√©es d'export
    export_p1 = period1_clean[['Day', 'DailyAverage', 'predictions', 'TempAvg', 'is_weekend', 'is_holiday']].copy()
    export_p1['periode'] = 'P√©riode 1'
    
    export_p2 = period2_clean[['Day', 'DailyAverage', 'predictions', 'TempAvg', 'is_weekend', 'is_holiday']].copy()
    export_p2['periode'] = 'P√©riode 2'
    
    export_combined = pd.concat([export_p1, export_p2], ignore_index=True)
    
    csv_filename = f"donnees_comparaison_{start1.strftime('%Y%m%d')}_{end1.strftime('%Y%m%d')}_vs_{start2.strftime('%Y%m%d')}_{end2.strftime('%Y%m%d')}.csv"
    export_combined.to_csv(csv_filename, index=False)
    
    print(f"‚úÖ Donn√©es sauvegard√©es: {csv_filename}")

print("\n" + "="*70)
print("üéØ COMPARAISON TERMIN√âE !")
print("="*70)
print(f"üìä P√©riode 1: {stats1['consommation_totale']:.0f} kWh total")
print(f"üìä P√©riode 2: {stats2['consommation_totale']:.0f} kWh total")
print(f"üìà Diff√©rence: {diff_pct:+.1f}% ({diff_totale:+.0f} kWh)")
print(f"üìÅ Graphique: {filename}")
print("="*70) 